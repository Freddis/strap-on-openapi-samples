/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CarsIndexRouteImport } from './routes/cars/index'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { ServerRoute as StoplightServerRouteImport } from './routes/stoplight'
import { ServerRoute as OpenapiSchemaServerRouteImport } from './routes/openapi-schema'
import { ServerRoute as ApiServerRouteImport } from './routes/api'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CarsIndexRoute = CarsIndexRouteImport.update({
  id: '/cars/',
  path: '/cars/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const StoplightServerRoute = StoplightServerRouteImport.update({
  id: '/stoplight',
  path: '/stoplight',
  getParentRoute: () => rootServerRouteImport,
} as any)
const OpenapiSchemaServerRoute = OpenapiSchemaServerRouteImport.update({
  id: '/openapi-schema',
  path: '/openapi-schema',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiServerRoute = ApiServerRouteImport.update({
  id: '/api',
  path: '/api',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/cars': typeof CarsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/cars': typeof CarsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/cars/': typeof CarsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth/login' | '/auth/register' | '/cars'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth/login' | '/auth/register' | '/cars'
  id: '__root__' | '/' | '/auth/login' | '/auth/register' | '/cars/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  CarsIndexRoute: typeof CarsIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api': typeof ApiServerRoute
  '/openapi-schema': typeof OpenapiSchemaServerRoute
  '/stoplight': typeof StoplightServerRoute
}
export interface FileServerRoutesByTo {
  '/api': typeof ApiServerRoute
  '/openapi-schema': typeof OpenapiSchemaServerRoute
  '/stoplight': typeof StoplightServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api': typeof ApiServerRoute
  '/openapi-schema': typeof OpenapiSchemaServerRoute
  '/stoplight': typeof StoplightServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api' | '/openapi-schema' | '/stoplight'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api' | '/openapi-schema' | '/stoplight'
  id: '__root__' | '/api' | '/openapi-schema' | '/stoplight'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiServerRoute: typeof ApiServerRoute
  OpenapiSchemaServerRoute: typeof OpenapiSchemaServerRoute
  StoplightServerRoute: typeof StoplightServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cars/': {
      id: '/cars/'
      path: '/cars'
      fullPath: '/cars'
      preLoaderRoute: typeof CarsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/stoplight': {
      id: '/stoplight'
      path: '/stoplight'
      fullPath: '/stoplight'
      preLoaderRoute: typeof StoplightServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/openapi-schema': {
      id: '/openapi-schema'
      path: '/openapi-schema'
      fullPath: '/openapi-schema'
      preLoaderRoute: typeof OpenapiSchemaServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api': {
      id: '/api'
      path: '/api'
      fullPath: '/api'
      preLoaderRoute: typeof ApiServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  CarsIndexRoute: CarsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiServerRoute: ApiServerRoute,
  OpenapiSchemaServerRoute: OpenapiSchemaServerRoute,
  StoplightServerRoute: StoplightServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
