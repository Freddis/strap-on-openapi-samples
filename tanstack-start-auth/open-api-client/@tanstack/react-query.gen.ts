// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getCars, postAuthLogin, postAuthRegister } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetCarsData, PostAuthLoginData, PostAuthLoginError, PostAuthLoginResponse, PostAuthRegisterData, PostAuthRegisterError, PostAuthRegisterResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getCarsQueryKey = (options?: Options<GetCarsData>) => createQueryKey('getCars', options);

/**
 * Returns list of cars in stock
 */
export const getCarsOptions = (options?: Options<GetCarsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCars({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCarsQueryKey(options)
    });
};

export const postAuthLoginQueryKey = (options?: Options<PostAuthLoginData>) => createQueryKey('postAuthLogin', options);

/**
 * Logs in user
 */
export const postAuthLoginOptions = (options?: Options<PostAuthLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthLoginQueryKey(options)
    });
};

/**
 * Logs in user
 */
export const postAuthLoginMutation = (options?: Partial<Options<PostAuthLoginData>>): UseMutationOptions<PostAuthLoginResponse, AxiosError<PostAuthLoginError>, Options<PostAuthLoginData>> => {
    const mutationOptions: UseMutationOptions<PostAuthLoginResponse, AxiosError<PostAuthLoginError>, Options<PostAuthLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthRegisterQueryKey = (options?: Options<PostAuthRegisterData>) => createQueryKey('postAuthRegister', options);

/**
 * Logs in user
 */
export const postAuthRegisterOptions = (options?: Options<PostAuthRegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthRegisterQueryKey(options)
    });
};

/**
 * Logs in user
 */
export const postAuthRegisterMutation = (options?: Partial<Options<PostAuthRegisterData>>): UseMutationOptions<PostAuthRegisterResponse, AxiosError<PostAuthRegisterError>, Options<PostAuthRegisterData>> => {
    const mutationOptions: UseMutationOptions<PostAuthRegisterResponse, AxiosError<PostAuthRegisterError>, Options<PostAuthRegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthRegister({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};